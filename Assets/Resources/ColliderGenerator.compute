int vertCount;
int totalPolygons;
RWStructuredBuffer<uint> idArray;
RWTexture2D<float> testOutputTex;
RWTexture2D<float2> pixelCountsOutput;
RWStructuredBuffer<uint> pixelCounts;
RWTexture2DArray<float4> allTextures;
RWStructuredBuffer<float2> allVerts;
RWStructuredBuffer<uint> polyStartIndices;
RWStructuredBuffer<uint> resultDebug;
RWStructuredBuffer<uint> allPolyEntrances;
RWStructuredBuffer<uint> nonRepeatingEntranceIds;
RWStructuredBuffer<uint> nonRepeatingEntranceIdsCounts;
RWStructuredBuffer<uint> allPolyEntrancesXCoords;
RWStructuredBuffer<uint> polyHoleResults;
Texture2D<float4> origTex;
int texWidth;
int texHeight;
float resolutionFactor;

// Each #kernel tells which function to compile; you can have many kernels


float dist(float2 point1, float2 point2)
{
    return sqrt(((point1.x - point2.x) * (point1.x - point2.x)) + ((point1.x - point2.y) * (point1.y - point2.y)));
}

float DistanceBetweenPointAndLineSegment(float2 point1, float2 start, float2 end)
{
    if (start.x == end.x && start.y == end.y)
        return dist(point1, start);

    float2 v = end - start;
    float2 w = point1 - start;

    float c1 = dot(w, v);
    if (c1 <= 0) return dist(point1, start);

    float c2 = dot(v, v);
    if (c2 <= c1) return dist(point1, end);

    float b = c1 / c2;
    float2 pointOnLine = (start + (v * b));
    return dist(point1, pointOnLine);
}

#pragma kernel GetPixelCountsAndTextures

[numthreads(32,1,1)]
void GetPixelCountsAndTextures (uint3 id: SV_DispatchThreadID)
{
    uint yLevel = id.x;
    if(yLevel > texHeight * resolutionFactor)
    {
        return;
    }
    uint width = texWidth * (resolutionFactor);
    int mostRecentID = -1;
    for(int x = 0;x < width;x++)
    {
        if(idArray[yLevel * width + x] != -1 && idArray[yLevel * width + x] != -2)
        {
            mostRecentID = idArray[yLevel * width + x];
        }
        if(idArray[yLevel * width + x] != -2 && mostRecentID != -1)
        {
            resultDebug[yLevel * texWidth * resolutionFactor + x] = polyHoleResults[mostRecentID] + 1;
            for(int x1 = 0;x1 < (1/resolutionFactor);x1++)
            {
                for(int y1 = 0;y1 < (1/resolutionFactor);y1++)
                {
                    allTextures[uint3(x * (1/resolutionFactor) + x1, yLevel * (1/resolutionFactor) + y1, polyHoleResults[mostRecentID])] = origTex[uint2((x * (1/resolutionFactor) + x1), (yLevel * (1/resolutionFactor) + y1))];
                }
            }
            InterlockedAdd(pixelCounts[polyHoleResults[mostRecentID]], (1/resolutionFactor) * (1/resolutionFactor));
        }
    }
    for(int i = 0;i <= totalPolygons;i++)
    {
        int toRepresent = pixelCounts[i];
        int first = (toRepresent % 65536.0);
        int second = (int)(toRepresent/65536.0);
        pixelCountsOutput[uint2(i, 0)] = float2(first/65536.0, second/65536.0);
    }
}

#pragma kernel FindHolesViaVertices

[numthreads(8,1,1)]
void FindHolesViaVertices (uint3 id: SV_DispatchThreadID)
{
    uint polyIndex = id.x;
    if(polyIndex >= totalPolygons)
    {
        return;
    }
    uint startX = allVerts[polyStartIndices[polyIndex]].x * resolutionFactor;
    uint y = allVerts[polyStartIndices[polyIndex]].y * resolutionFactor;
    uint insideTotal = 0;
    uint totalLines = 0;
    //resultDebug[y * texWidth * resolutionFactor + startX] = 4;
    for(uint x = startX; x < texWidth * resolutionFactor;x++)
    {
        if(idArray[y * texWidth * resolutionFactor + x] != -1 && idArray[y * texWidth * resolutionFactor + x] != -2 && (idArray[y * texWidth * resolutionFactor + x - 1] == -2 || idArray[y * texWidth * resolutionFactor + x + 1] == -2) && idArray[y * texWidth * resolutionFactor + x] != polyIndex)
        {
            uint currentInd = idArray[y * texWidth * resolutionFactor + x];
            bool newPoly = true;
            uint polyInd = -1;
            for(int i = 0;i < insideTotal;i++)
            {
                if(nonRepeatingEntranceIds[polyIndex * totalPolygons + i] == currentInd)
                {
                    newPoly = false;
                    polyInd = i;
                    break;
                }
            }
            if(newPoly)
            {
                polyInd = insideTotal;
                nonRepeatingEntranceIds[polyIndex * totalPolygons + polyInd] = currentInd;
                insideTotal += 1;
            }
            if(idArray[y * texWidth * resolutionFactor + x - 1] == -2 && idArray[y * texWidth * resolutionFactor + x + 1] == -2)
            {
                resultDebug[y * texWidth * resolutionFactor + x] = 3;
                nonRepeatingEntranceIdsCounts[polyIndex * totalPolygons + polyInd] += 2;
                totalLines += 2;
            }else
            {
                resultDebug[y * texWidth * resolutionFactor + x] = 2;
                nonRepeatingEntranceIdsCounts[polyIndex * totalPolygons + polyInd] += 1;
                totalLines += 1;
            }
        }
    }
    bool isHole = false;
    if(totalLines % 2 == 1)
    {
        resultDebug[y * texWidth * resolutionFactor + startX] = 5;
        for(int i = 0;i < insideTotal;i++)
        {
            if(nonRepeatingEntranceIdsCounts[polyIndex * totalPolygons + i] % 2 == 1)
            {
                isHole = true;
                for(int j = polyStartIndices[polyIndex];j < polyStartIndices[polyIndex + 1];j++)
                {
                    //idArray[(allVerts[j].y * resolutionFactor) * (texWidth * resolutionFactor) + (allVerts[j].x * resolutionFactor)] = nonRepeatingEntranceIds[polyIndex * totalPolygons + i];
                    resultDebug[(allVerts[j].y * resolutionFactor) * (texWidth * resolutionFactor) + (allVerts[j].x * resolutionFactor)] = nonRepeatingEntranceIds[polyIndex * totalPolygons + i] + 1;
                }
                //float2 otherVert = allVerts[polyStartIndices[nonRepeatingEntranceIds[polyIndex * totalPolygons + i]]];
                resultDebug[y * texWidth * resolutionFactor + startX] = nonRepeatingEntranceIds[polyIndex * totalPolygons + i] + 1;
                testOutputTex[uint2(polyIndex, 0)] = float((nonRepeatingEntranceIds[polyIndex * totalPolygons + i] + 1.0)/65535.0);
                polyHoleResults[polyIndex] = nonRepeatingEntranceIds[polyIndex * totalPolygons + i];
                break;
            }
        }
    }
    if(!isHole)
    {
        testOutputTex[uint2(polyIndex, 0)] = float((polyIndex + 1.0)/65535.0);
        polyHoleResults[polyIndex] = polyIndex;
    }
}


#pragma kernel FindHoles

[numthreads(64,1,1)]
void FindHoles (uint3 id : SV_DispatchThreadID)
{
    int yLevel = id.x;
    bool isClear = true;
    bool justClear = false;
    int xAfterClear = 0;
    if(yLevel < texHeight * resolutionFactor)
    {
        int startX = yLevel * texWidth * resolutionFactor;
        for(int i = startX;i < startX + texWidth * resolutionFactor;i++)
        {
            allPolyEntrances[i] = -1;
            nonRepeatingEntranceIds[i] = -1;
        }
        int currentEntranceInd = 0;
        int numIds = 0;
        int mostRecentID = -1;
        for(int x = 0;x < texWidth * resolutionFactor;x++)
        {
            int index = (yLevel) * (texWidth * resolutionFactor) + (x);
            if(idArray[index] != -1 && idArray[index] != -2 && idArray[index] != idArray[index - 1])
            {
                mostRecentID = idArray[index];
                allPolyEntrances[startX + currentEntranceInd] = idArray[index];
                allPolyEntrancesXCoords[startX + currentEntranceInd] = x;
                bool idExists = false;
                for(int i = 0; i < numIds;i++)
                {
                    if(nonRepeatingEntranceIds[startX + i] == idArray[index])
                    {
                        idExists = true;
                        break;
                    }
                }
                if(!idExists)
                {
                    nonRepeatingEntranceIds[startX + numIds] = idArray[index];
                    numIds++;
                }
                currentEntranceInd++;
            }else if(idArray[index] == -2)
            {
                isClear = true;
            }/*
            if(origTex[yLevel * (1/resolutionFactor) * texWidth + x * (1/resolutionFactor)].a > 0)
            {
                if(isClear == true)
                {
                    isClear = false;
                    justClear = true;
                    xAfterClear = x * (1/resolutionFactor) - (1/resolutionFactor);
                }
            }*/
            /*if(isClear)
            {
                if(origTex[yLevel * texWidth + x].a > 0)
                {
                    isClear = false;
                }
            }*/
            if(mostRecentID != -1)
            {
                for(int y = 0;y < 1/resolutionFactor;y++)
                {
                    for(int x1 = 0;x1 < 1/resolutionFactor;x1++)
                    {
                        //allTextures[uint3(x * (1/resolutionFactor) + x1, yLevel * (1/resolutionFactor) + y, mostRecentID)] = origTex[(yLevel * (1/resolutionFactor) + y) * texWidth + (x * (1/resolutionFactor) + x1)];
                    }
                }
                if(justClear)
                {
                    /*for(int x2 = xAfterClear;x2 < x * (1/resolutionFactor);x2++)
                    {
                        for(int y = 0;y < 1/resolutionFactor;y++)
                        {
                            for(int x1 = 0;x1 < 1/resolutionFactor;x1++)
                            {
                                //origTex[(yLevel * (1/resolutionFactor) + y) * texWidth + (x2 * (1/resolutionFactor) + x1)];
                                allTextures[uint3(x2 * (1/resolutionFactor) + x1, yLevel * (1/resolutionFactor) + y, mostRecentID)] = float4(1.0,0.0,0.0,1.0);
                            }
                        }
                    }
                    justClear = false;*/
                }
                //allTextures[uint3(x, yLevel, mostRecentID)] = origTex[yLevel * texWidth + x];
                /*if(origTex[yLevel * (1/resolutionFactor) * texWidth + x * (1/resolutionFactor)].a > 0)
                {
                    InterlockedAdd(pixelCounts[mostRecentID], 1);
                    InterlockedAdd(pixelCounts[totalPolygons], 1);
                }*/
            }
        }
        for(int i = 0;i < numIds;i++)
        {
            int count = 0;
            for(int j = 0;j < currentEntranceInd;j++)
            {
                if(allPolyEntrances[startX + j] == nonRepeatingEntranceIds[startX + i])
                {
                    count++;
                }
            }
            if(count % 2 != 0)
            {
                for(int j = currentEntranceInd;j >= 1;j--)
                {
                    allPolyEntrances[startX + j] = allPolyEntrances[startX + j - 1];
                    allPolyEntrancesXCoords[startX + j] = allPolyEntrancesXCoords[startX + j - 1];
                    if(allPolyEntrances[startX + j - 1] == nonRepeatingEntranceIds[startX + i] && ((idArray[startX + allPolyEntrancesXCoords[startX + j - 1]] == idArray[startX + allPolyEntrancesXCoords[startX + j - 1] + 1])))
                    {
                        allPolyEntrancesXCoords[startX + j] = allPolyEntrancesXCoords[startX + j - 1] + 1;
                        break;
                    }
                }
                currentEntranceInd++;
            }
        }
        for(int i = 0;i < currentEntranceInd;i++)
        {
            //transparent after a solid, maybe a hole.
            if(idArray[startX + allPolyEntrancesXCoords[startX + i] + 1] == -2 && idArray[startX + allPolyEntrancesXCoords[startX + i] - 1] != -2)
            {
                //number of this polygons entrances after this one
                int numLeft = 0;
                for(int j = i + 1;j < currentEntranceInd;j++)
                {
                    if(allPolyEntrances[startX + j] == allPolyEntrances[startX + i])
                    {
                        numLeft++;
                    }
                }
                if(numLeft % 2 != 0)
                {
                    int holeOf = -1;
                    int id = allPolyEntrances[startX + i];
                    for(int j = i - 1;j >= 0;j--)
                    {
                        if(allPolyEntrances[startX + j] != id && polyHoleResults[allPolyEntrances[startX + j]] == 0)
                        {
                            int lastXCoord = -1; 
                            int countOf = 0;
                            for(int k = 0;k <= i - 1;k++)
                            {
                                if(allPolyEntrances[startX + k] == allPolyEntrances[startX + j] && allPolyEntrancesXCoords[startX + k] != lastXCoord)
                                {
                                    countOf++;
                                    lastXCoord = allPolyEntrancesXCoords[startX + k];
                                }
                            }
                            if(countOf % 2 != 0)
                            {
                                int moreEntrances = 0;
                                int xCoord = allPolyEntrancesXCoords[startX + j];
                                for(int k = currentEntranceInd - 1;k >= i + 1;k--)
                                {
                                    if(allPolyEntrances[startX + k] == idArray[yLevel * texWidth * resolutionFactor + xCoord])
                                    {
                                        moreEntrances++;
                                    }
                                }
                                if(moreEntrances % 2 != 0)
                                {
                                    holeOf = idArray[yLevel * texWidth * resolutionFactor + xCoord];
                                    break;
                                }
                            }else
                            {
                                /*if(j == 0)
                                {
                                    
                                    int countOf = 0;
                                    for(int k = 0;k <= i - 1;k++)
                                    {
                                        if(allPolyEntrances[startX + k] == allPolyEntrances[startX + j] )
                                        {
                                            if(resultDebug[startX + allPolyEntrancesXCoords[startX + k]] == 0)
                                            {
                                                resultDebug[startX + allPolyEntrancesXCoords[startX + k]] = 1;
                                            }else
                                            {
                                                resultDebug[startX + allPolyEntrancesXCoords[startX + k]] = 5;
                                            }
                                            
                                            countOf++;
                                        }
                                    }
                                    if(countOf == 2)
                                    {
                                        resultDebug[startX + allPolyEntrancesXCoords[startX + i]] = 3;
                                    }else
                                    {
                                        resultDebug[startX + allPolyEntrancesXCoords[startX + i]] = 2;
                                    }
                                }*/
                                
                            }
                        }
                       
                    }
                    if(holeOf != -1)
                    {
                        polyHoleResults[id] = holeOf + 1;
                        //resultDebug[startX + allPolyEntrancesXCoords[startX + i]] = 1;
                        
                    }else
                    {
                        //resultDebug[startX + allPolyEntrancesXCoords[startX + i]] = 2;
                    }
                   
                }
            }
        }
        
    }
}


